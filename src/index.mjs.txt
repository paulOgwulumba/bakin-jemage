import { loadStdlib, ask } from '@reach-sh/stdlib';
import * as backend from './build/index.main.mjs';
const stdlib = loadStdlib();
const isAlice = await ask.ask(
  `Are you Alice?`,
  ask.yesno
);
const who = isAlice ? 'Alice' : 'Bob';
console.log(`Starting Bakin Jemage as ${who}`);
let acc = null;

const createAcc = await ask.ask(
  `Would you like to create an account? (only possible on devnet)`,
  ask.yesno
);

if (createAcc) {
  acc = await stdlib.newTestAccount(stdlib.parseCurrency(1000));
} else {
  const secret = await ask.ask(
    `What is your account secret?`,
    (x => x)
  );
  acc = await stdlib.newAccountFromSecret(secret);
}

let ctc = null;
if (isAlice) {
  ctc = acc.contract(backend);
  ctc.getInfo().then((info) => {
    console.log(`The contract is deployed as = ${JSON.stringify(info)}`); });
} else {
  const info = await ask.ask(
    `Please paste the contract information:`,
    JSON.parse
  );
  ctc = acc.contract(backend, info);
}

const fmt = (x) => stdlib.formatCurrency(x, 4);
const getBalance = async () => fmt(await stdlib.balanceOf(acc));
const before = await getBalance();
console.log(`Your balance is ${before}`);
const interact = { ...stdlib.hasRandom };

interact.informTimeout = () => {
  console.log(`There was a timeout.`);
  process.exit(1);
};

if (isAlice) {
  const amt = await ask.ask(
    `How much do you want to wager?`,
    stdlib.parseCurrency
  );
  interact.wager = amt;
  interact.deadline = { ETH: 100, ALGO: 100, CFX: 1000 }[stdlib.connector];
  interact.informOfJoiner = () => {
    console.log("A player has joined this contract!!");
  }
} else {
  interact.acceptWager = async (amt) => {
    const accepted = await ask.ask(
      `Do you accept the wager of ${fmt(amt)}?`,
      ask.yesno
    );
    if (!accepted) {
      process.exit(0);
    }
  };
}

interact.getNumberOfMoves = async () => {
  const numOfMoves = await ask.ask(`How many moves did it take you to capture the cat?`, (x) => {
    if (isNaN(parseInt(x))) {
      throw Error(`Not a valid number of moves ${x}`);
    }
    return parseInt(x);
  });
  console.log(`You captured the cat with ${numOfMoves} moves.`);
  return numOfMoves;
};

const OUTCOME = ['Alice wins', 'Bob wins'];

interact.informDraw = () => {
  console.log(`There was a draw, playing another round to determine winner.`);
};

interact.declareWinner = (outcome) => {
    console.log(OUTCOME[outcome] || 'Invalid outcome');

    if (outcome === 0) {
        console.log(isAlice? 'You win!!' : 'You lost, better luck next time.');
    }
    else {
        console.log(isAlice?  'You lost, better luck next time.' : 'You win!!');
    }
}

interact.getOpponentResult = (result) => {
    console.log('Your opponent captured the cat with', parseInt(result), 'moves!');
}

const part = isAlice ? ctc.p.Alice : ctc.p.Bob;
await part(interact);
const after = await getBalance();
console.log(`Your balance is now ${after}`);
ask.done();